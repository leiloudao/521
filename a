import numpy as np
import geatpy as ea

# 定义问题类
class MyProblem(ea.Problem):
    def __init__(self):
        name = 'BusRoutePlanning'  # 问题名称
        M = 2  # 目标维数
        maxormins = [1, -1]  # 目标最小化标记，-1表示最小化，1表示最大化
        Dim = 22  # 决策变量维数
        varTypes = [0] * Dim  # 决策变量类型，0表示实数，1表示整数
        lb = [0] * Dim  # 决策变量下界
        ub = [2] * Dim  # 决策变量上界
        lbin = [1] * Dim  # 决策变量下边界
        ubin = [1] * Dim  # 决策变量上边界
        self.distance = np.array([[0.0, 2.1, 3.4, 5.3, 6.0, 6.7, 7.3, 8.0, 9.1, 10.4, 11.5, 12.8, 13.9, 15.4, 16.3, 17.0, 17.9, 19.1, 20.1, 21.3, 22.4, 23.7],
 [2.1, 0.0, 1.3, 3.2, 3.9, 4.6, 5.2, 5.9, 7.0, 8.3, 9.4, 10.7, 11.8, 13.3, 14.2, 15.0, 15.9, 17.1, 18.1, 19.3, 20.4, 21.7],
 [3.4, 1.3, 0.0, 1.9, 2.6, 3.3, 3.9, 4.6, 5.7, 7.0, 8.1, 9.4, 10.5, 12.0, 12.9, 13.7, 14.6, 15.8, 16.8, 18.0, 19.1, 20.4],
 [5.3, 3.2, 1.9, 0.0, 0.7, 1.4, 2.0, 2.7, 3.8, 5.1, 6.2, 7.5, 8.6, 10.1, 11.0, 11.8, 12.7, 13.9, 14.9, 16.1, 17.2, 18.5],
 [6.0, 3.9, 2.6, 0.7, 0.0, 0.7, 1.3, 2.0, 3.1, 4.4, 5.5, 6.8, 7.9, 9.4, 10.3, 11.1, 12.0, 13.2, 14.2, 15.4, 16.5, 17.8],
 [6.7, 4.6, 3.3, 1.4, 0.7, 0.0, 0.6, 1.3, 2.4, 3.7, 4.8, 6.1, 7.2, 8.7, 9.6, 10.4, 11.3, 12.5, 13.5, 14.7, 15.8, 17.1],
 [7.3, 5.2, 3.9, 2.0, 1.3, 0.6, 0.0, 0.7, 1.8, 3.1, 4.2, 5.5, 6.6, 8.1, 9.0, 9.8, 10.7, 11.9, 12.9, 14.1, 15.2, 16.5],
 [8.0, 5.9, 4.6, 2.7, 2.0, 1.3, 0.7, 0.0, 1.1, 2.4, 3.5, 4.8, 5.9, 7.4, 8.3, 9.1, 10.0, 11.2, 12.2, 13.4, 14.5, 15.8],
 [9.1, 7.0, 5.7, 3.8, 3.1, 2.4, 1.8, 1.1, 0.0, 1.3, 2.4, 3.7, 4.8, 6.3, 7.2, 8.0, 8.9, 10.1, 11.1, 12.3, 13.4, 14.7],
 [10.4, 8.3, 7.0, 5.1, 4.4, 3.7, 3.1, 2.4, 1.3, 0.0, 1.1, 2.4, 3.5, 5.0, 5.9, 6.7, 7.6, 8.8, 9.8, 11.0, 12.1, 13.4],
 [11.5, 9.4, 8.1, 6.2, 5.5, 4.8, 4.2, 3.5, 2.4, 1.1, 0.0, 1.3, 2.4, 3.9, 4.8, 5.6, 6.5, 7.7, 8.7, 9.9, 11.0, 12.3],
 [12.8, 10.7, 9.4, 7.5, 6.8, 6.1, 5.5, 4.8, 3.7, 2.4, 1.3, 0.0, 1.1, 2.6, 3.5, 4.3, 5.2, 6.4, 7.4, 8.6, 9.7, 11.0],
 [13.9, 11.8, 10.5, 8.6, 7.9, 7.2, 6.6, 5.9, 4.8, 3.5, 2.4, 1.1, 0.0, 1.5, 2.4, 3.2, 4.1, 5.3, 6.3, 7.5, 8.6, 9.9],
 [15.4, 13.3, 12.0, 10.1, 9.4, 8.7, 8.1, 7.4, 6.3, 5.0, 3.9, 2.6, 1.5, 0.0, 0.9, 1.7, 2.6, 3.8, 4.8, 6.0, 7.1, 8.4],
 [16.3, 14.2, 12.9, 11.0, 10.3, 9.6, 9.0, 8.3, 7.2, 5.9, 4.8, 3.5, 2.4, 0.9, 0.0, 0.8, 1.7, 2.9, 3.9, 5.1, 6.2, 7.5],
 [17.0, 15.0, 13.7, 11.8, 11.1, 10.4, 9.8, 9.1, 8.0, 6.7, 5.6, 4.3, 3.2, 1.7, 0.8, 0.0, 0.9, 2.1, 3.1, 4.3, 5.4, 6.7],
 [17.9, 15.9, 14.6, 12.7, 12.0, 11.3, 10.7, 10.0, 8.9, 7.6, 6.5, 5.2, 4.1, 2.6, 1.7, 0.9, 0.0, 1.2, 2.2, 3.4, 4.5, 5.8],
 [19.1, 17.1, 15.8, 13.9, 13.2, 12.5, 11.9, 11.2, 10.1, 8.8, 7.7, 6.4, 5.3, 3.8, 2.9, 2.1, 1.2, 0.0, 1.0, 2.2, 3.3, 4.6],
 [20.1, 18.1, 16.8, 14.9, 14.2, 13.5, 12.9, 12.2, 11.1, 9.8, 8.7, 7.4, 6.3, 4.8, 3.9, 3.1, 2.2, 1.0, 0.0, 1.2, 2.3, 3.6],
 [21.3, 19.3, 18.0, 16.1, 15.4, 14.7, 14.1, 13.4, 12.3, 11.0, 9.9, 8.6, 7.5, 6.0, 5.1, 4.3, 3.4, 2.2, 1.2, 0.0, 1.1, 2.4],
 [22.4, 20.4, 19.1, 17.2, 16.5, 15.8, 15.2, 14.5, 13.4, 12.1, 11.0, 9.7, 8.6, 7.1, 6.2, 5.4, 4.5, 3.3, 2.3, 1.1, 0.0, 1.3],
 [23.7, 21.7, 20.4, 18.5, 17.8, 17.1, 16.5, 15.8, 14.7, 13.4, 12.3, 11.0, 9.9, 8.4, 7.5, 6.7, 5.8, 4.6, 3.6, 2.4, 1.3, 0.0]]) # 22个站点互相之间的距离

        self.passengers = np.array([9, 6, 5, 3, 7, 4, 7, 8, 4, 8, 5, 6, 7, 6, 3, 7, 1, 5, 6, 7, 5, 0]) #每个站点的上车人数
        # self.passengers_down = np.array([0, 4, 6, 7, 3, 4, 8, 6, 3, 4, 5, 6, 7, 7, 3, 4, 5, 6, 1, 3, 2, 4]) #每个站点的下车人数
        self.goods_on = np.array([6, 5, 0, 7, 0, 6, 8, 7, 6, 0, 4, 3, 0, 0, 0, 6, 4, 7, 5, 0, 0, 0])
        self.max_capacity = 30  # 最大客容
        self.max_capacity_good = 20  # 最大货容
        ea.Problem.__init__(self, name, M, maxormins, Dim, varTypes, lb, ub, lbin, ubin)

    def aimFunc(self, pop): # 目标函数
        x = pop.Phen
        ObjV = np.zeros((pop.sizes, 2))
        penalty = 0
        for i in range(pop.sizes):
            route1 = np.where(x[i] == 0)[0]  # 路线1上的站点索引
            route2 = np.where(x[i] == 1)[0]  # 路线2上的站点索引
            route3 = np.where(x[i] == 2)[0]  # 路线3上的站点索引
            # 保证所有站点至少经过一次
            all_stations_visited = len(np.unique(np.concatenate((route1, route2, route3)))) == len(self.distance)
            # if not all_stations_visited:
            #     penalty += 10000
            # # 检查每条路线上站点数量是否不少于10个，否则添加惩罚值
            # if len(route1) < 10 or len(route2) < 10 or len(route3) < 10:
            #     penalty += 1000 * (5 - min(len(route1), len(route2), len(route3)))

            cargo1 = np.sum(self.goods_on[route1])
            cargo2 = np.sum(self.goods_on[route2])
            cargo3 = np.sum(self.goods_on[route3])
            total_cargo = cargo1 + cargo2 + cargo3

            # 计算每条路线的时间和利润
            time1 = np.sum(self.distance[route1[:-1], route1[1:]]) / 10  # 路线1上的总时间
            time2 = np.sum(self.distance[route2[:-1], route2[1:]]) / 10  # 路线2上的总时间
            time3 = np.sum(self.distance[route3[:-1], route3[1:]]) / 10  # 路线3上的总时间
            profit1 = np.sum(self.passengers[route1]) * 3  # 路线1上的总利润
            profit2 = np.sum(self.passengers[route2]) * 3  # 路线2上的总利润
            profit3 = np.sum(self.passengers[route3]) * 3  # 路线3上的总利润
            total_time = time1 + time2 + time3  # 总时间
            total_profit = total_cargo*3 + profit1 + profit2 + profit3 - penalty+16.  # 总利润（考虑惩罚）


            ObjV[i] = [total_profit, total_time]  # 保存个体的目标函数值

        pop.ObjV = ObjV  # 将目标函数值保存到种群对象中

# 创建问题对象
problem = MyProblem()
population = ea.Population(Encoding='RI', NIND=2000)
algorithm = ea.moea_NSGA2_templet(problem, population,
                                  MAXGEN=2000,
                                  logTras=0)
# 求解
res = ea.optimize(algorithm, verbose=False, drawing=2, outputMsg=True, drawLog=False, saveFlag=False,
                  dirName='result')
